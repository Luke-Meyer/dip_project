#include "main.h"


void MyApp::init_mask22x12_templates()
{
    /*---Values for '0'---*/
    struct mask22x12 num0; 
    num0.rows = 22;
    num0.cols = 12;
    num0.match = false;
    num0.value = '0';
    num0.mask =    { 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
                      0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                      0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                      0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 
                      0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 
                      0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 };

    
    /*---Values for '1'---*/
    struct mask22x12 num1; 
    num1.rows = 22;
    num1.cols = 12;
    num1.match = false;
    num1.value = '1';
    num1.mask =   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 };
    
    /*---Values for '2'---*/
    struct mask22x12 num2; 
    num2.rows = 22;
    num2.cols = 12;
    num2.match = false;
    num2.value = '2';
    num2.mask =   { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    
    /*---Values for '3'---*/
    struct mask22x12 num3; 
    num3.rows = 22;
    num3.cols = 12;
    num3.match = false;
    num3.value = '3';
    num3.mask =   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0,  
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 };

    /*---Values for '4'---
    struct mask22x12 num4; 
    num4.rows = 22;
    num4.cols = 12;
    num4.match = false;
    num4.value = '4';
    num4.mask =  */
    
    /*---Values for '5'---*/
    struct mask22x12 num5; 
    num5.rows = 22;
    num5.cols = 12;
    num5.match = false;
    num5.value = '5';
    num5.mask =   { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        
    /*---Values for '6'---*/
    struct mask22x12 num6; 
    num6.rows = 22;
    num6.cols = 12;
    num6.match = false;
    num6.value = '6';
    num6.mask =   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    /*---Values for '7'---
    struct mask22x12 num7; 
    num7.rows = 22;
    num7.cols = 12;
    num7.match = false;
    num7.value = '7';
    num7.mask = */ 

    /*---Values for '8'---*/
    struct mask22x12 num8; 
    num8.rows = 22;
    num8.cols = 12;
    num8.match = false;
    num8.value = '8';
    num8.mask =   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
                     0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                     0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    
    /*---Values for '9'---*/
    struct mask22x12 num9; 
    num9.rows = 22;
    num9.cols = 12;
    num9.match = false;
    num9.value = '9';
    num9.mask =   { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 
                     0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 
                     0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 
                     0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                     0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
                     0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 
                     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
                     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 };
          
    /*---Values for 'A'---*/      
    struct mask22x12 letterA;
    letterA.rows = 22;
    letterA.cols = 12;
    letterA.match = false;
    letterA.value = 'A';
    letterA.mask = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 
                      0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
                      0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 
                      0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
                      0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
                      0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
                      0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
                      0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                      0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                      0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    /*---Values for 'E'---*/  
    struct mask22x12 letterE;
    letterA.rows = 22;
    letterA.cols = 12;
    letterA.match = false;
    letterA.value = 'E';
    letterA.mask = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    
    /*---Values for 'G'---*/
    struct mask22x12 letterG;
    letterA.rows = 22;
    letterA.cols = 12;
    letterA.match = false;
    letterA.value = 'G';
    letterA.mask = 

    /*---Values for 'T'---*/
    struct mask22x12 letterT;
    letterA.rows = 22;
    letterA.cols = 12;
    letterA.match = false;
    letterA.value = 'T';
    letterA.mask = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    /*---Values for 'U'---*/
    struct mask22x12 letterU;
    letterA.rows = 22;
    letterA.cols = 12;
    letterA.match = false;
    letterA.value = 'U';
    letterA.mask = { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
                      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
                      0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0 };

    /*---Values for 'V'---*/
    struct mask22x12 letterV;
    letterA.rows = 22;
    letterA.cols = 12;
    letterA.match = false;
    letterA.value = 'V';
    letterA.mask = { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                      1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
                      0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
                      0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 
                      0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 
                      0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 
                      0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 
                      0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 
                      0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
                      0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
                      0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 
                      0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 };
}







/********************************************************************************************/
// ----------------------------------- menu bar additions ------------------------------------

// the following methods add actions to the menu bar
// note the method prototype and naming conventions:
// bool ClassName::Menu_Menubar_Menuitem( Image & );

// ----------------------------------- palette manipulations ---------------------------------

// negate the image
bool MyApp::Menu_Palette_Negate( Image &image )
{
    negatePalette( image );
    return true;
}

// convert a color image to grayscale
bool MyApp::Menu_Palette_Grayscale( Image &image )
{
    grayscale( image );
    return true;
}

// adjust image brightness (note use of Dialog)
bool MyApp::Menu_Palette_Brightness( Image &image )
{
    int c = 0;
    if ( !Dialog( "Brightness" ).Add( c, "offset", -255, 255 ).Show() )
        return false;
    imageAddConstant( image, c );
    return true;
}

// ----------------------------------- histogram routines ------------------------------------

// display histogram
bool MyApp::Menu_Histogram_Display( Image &image )
{
    displayHistogram( image );
    return true;
}

// histogram contrast stretch
bool MyApp::Menu_Histogram_Stretch( Image &image )
{
    histogramStretch( image );
    return true;
}

// histogram contrast stretch with specified endpoints (note use of Dialog)
bool MyApp::Menu_Histogram_StretchSpecify( Image &image )
{
    double left = 1.0, right = 1.0;
    if ( !Dialog( "endpoints" ).Add( left, "left", 0.0, 100.0 ).Add( right, "right", 0.0, 100.0 ).Show() )
        return false;
    histogramStretchSpecify( image, left, right);
    return true;
}

// ----------------------------------- spatial filtering -------------------------------------

// smooth the image (3x3 center-weighted smoothing filter)
bool MyApp::Menu_Filter_Smooth( Image &image )
{
    smooth( image );
    return true;
}

// Gaussian smoothing filter (note use of getParams)
bool MyApp::Menu_Filter_GaussianSmooth( Image &image )
{
    double sigma = 2.0;
    if ( !getParams( sigma ) ) return false;
    smoothGaussian( image, sigma );
    return true;
}

// sharpen the image
bool MyApp::Menu_Filter_Sharpen( Image &image )
{
    sharpen( image );
    return true;
}

// ----------------------------------- edge detection ----------------------------------------

// Sobel edge detection
bool MyApp::Menu_Edge_Sobel( Image &image )
{
    sobel( image );
    return true;
}

// Sobel edge detection
bool MyApp::Menu_Edge_SobelMagnitude( Image &image )
{
    sobelMagnitude( image );
    return true;
}

// Sobel edge detection
bool MyApp::Menu_Edge_SobelDirection( Image &image )
{
    sobelDirection( image );
    return true;
}
